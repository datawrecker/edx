1
00:00:00,659 --> 00:00:04,509
Hello and welcome everybody again to Autonomous Navigation for Flying Robots.

2
00:00:04,509 --> 00:00:09,540
In this video we will look at motors that are typically used in quadrotors and suitable

3
00:00:09,540 --> 00:00:15,040
motor controllers that generate signals to make the motors swing at a particular rate.

4
00:00:15,040 --> 00:00:21,970
A very simple motor is the so called DC motor. It just consists of two things, namely the

5
00:00:21,970 --> 00:00:31,000
stationary magnet on the outside, and then an  electromagnet on the axis that is able to spin.

6
00:00:31,000 --> 00:00:37,170
The electromagnet, when it is switched on, uses a magnetic field. And that in turn uses a

7
00:00:37,170 --> 00:00:47,410
torque on the axis, and this makes the axis spin. To align the magnetic field of the electro

8
00:00:47,410 --> 00:00:51,070
magnets with the permanent magnet on the outside.

9
00:00:51,070 --> 00:00:58,769
But then this motion comes to a rest as soon as the magnets are aligned. And when this

10
00:00:58,769 --> 00:01:04,940
happens typically a split ring changes the direction of the current such that the motion

11
00:01:04,940 --> 00:01:05,580
of the motor continues.

12
00:01:05,580 --> 00:01:12,410
The principle is very simple, which means that you can easily build one yourself, maybe

13
00:01:12,410 --> 00:01:20,400
you already build one at school, as visualized here in the middle image.

14
00:01:20,400 --> 00:01:24,830
Also the advantage of DC motors is that you can make them super small so that they are

15
00:01:24,830 --> 00:01:33,240
really suited well for nano-quadrotors like the CrazyFlie depicted on the right.

16
00:01:33,240 --> 00:01:40,720
To control the speed of a DC motor you have to adjust the power. So if you give more voltage

17
00:01:40,720 --> 00:01:49,360
to the motor it will start spinning faster, and if you reduce the voltage then the rotation will slow down.

18
00:01:49,360 --> 00:01:54,890
But the problem of course is that we have a micro controller or a computer

19
00:01:54,890 --> 00:02:01,150
from which we want to specify the motor speed. So the question is how can we actually modulate the

20
00:02:01,150 --> 00:02:03,080
power using a digital signal?

21
00:02:03,080 --> 00:02:08,850
And then, a common approach that is implemented in hardware in most micro controllers is the

22
00:02:08,850 --> 00:02:14,370
so called pulse width modulation, also abbreviated as PWM.

23
00:02:14,370 --> 00:02:19,650
And there the idea is that you have a digital signal that you switch on and off very quickly

24
00:02:19,650 --> 00:02:26,260
at a certain frequency.

25
00:02:26,260 --> 00:02:32,410
And then the amount of time that the signal is switched on during this period is called the

26
00:02:32,410 --> 00:02:36,310
duty cycle. And the larger this duty cycle is, with respect

27
00:02:36,310 --> 00:02:46,400
to the full period, the more power you actually transmit.

28
00:02:46,400 --> 00:02:53,960
So for example, if the duty cycle is 0 then you do not power at all the motor. If the

29
00:02:53,960 --> 00:03:02,030
duty cycle is during the whole period, then you would power it at full speed.

30
00:03:02,030 --> 00:03:07,880
You can continuously smoothly change this duty cycle and in this way regulate the speed

31
00:03:07,880 --> 00:03:12,920
or the output power for the motor.

32
00:03:12,920 --> 00:03:18,660
Of course this digital signal then needs to be amplified using a MOSFET. For example,

33
00:03:18,660 --> 00:03:24,970
to actually generate the high current that you need for powering the motors.

34
00:03:24,970 --> 00:03:29,510
An alternative to DC motors are the so called brushless motors. There you have the electro

35
00:03:29,510 --> 00:03:35,280
magnets on the outside and they are stationary. And then you have permanent magnets on the

36
00:03:35,280 --> 00:03:45,640
axis, and this axis can either be in between the coils or outside around the coils.

37
00:03:45,640 --> 00:03:51,760
We need at least three coils for building a brushless motor. But most brushless motors

38
00:03:51,760 --> 00:03:56,110
used in practice have much more, as you can see here in the images.

39
00:03:56,110 --> 00:04:00,030
The advantage of brushless motor is that you don't have brushes, you don't need a split

40
00:04:00,030 --> 00:04:04,640
ring to reverse the current. And that means that motors need less maintenance

41
00:04:04,640 --> 00:04:09,530
you never need to replace the brushes there is less mechanics.

42
00:04:09,530 --> 00:04:17,029
And also the efficiency is much higher because you can regulate better the power that you

43
00:04:17,029 --> 00:04:18,329
give to the electro magnets.

44
00:04:18,329 --> 00:04:22,620
The brushless controller is a little bit more complicated than a controller for a DC motor

45
00:04:22,620 --> 00:04:26,880
you need some electronics. But before we go into the details, let's first

46
00:04:26,880 --> 00:04:32,480
have a look at the wiring scheme of such a brushless motor, shown here on bottom left.

47
00:04:32,480 --> 00:04:39,300
Typically the three coils that you have are connected to three pols A, B and C. And then

48
00:04:39,300 --> 00:04:44,430
the other side of the coil is soldered together between all coils.

49
00:04:44,430 --> 00:04:50,870
And then, you setting a certain current between two coils, for example between A and B or

50
00:04:50,870 --> 00:05:04,190
between B and C. And you setting an AC signal there and the

51
00:05:04,190 --> 00:05:11,639
signal between these pairs of coils is shifted by 120 degrees. And that induces a rotary

52
00:05:11,639 --> 00:05:18,639
magnetic field then on the coils and that will make the axes of the brushless motor spin

53
00:05:18,639 --> 00:05:26,620
at the frequency of these three signals.

54
00:05:26,620 --> 00:05:36,040
And so you need to have a micro controller that is able to generate such phases at the

55
00:05:36,040 --> 00:05:42,180
desired speed. And for that you typically need a micro controller that then outputs

56
00:05:42,180 --> 00:05:44,550
a PWM signal again for the three motor phases.

57
00:05:44,550 --> 00:05:53,960
Now, in this case it's again possible to convert this PWM signal using an AC converter, just

58
00:05:53,960 --> 00:05:58,600
consisting of a capacitor and a MOSFET chip to improve the power output because the micro controller 

59
00:05:58,600 --> 00:06:03,760
can't power directly the motor of course or the electro magnets.

60
00:06:03,760 --> 00:06:08,169
So you run then to an AC converter and that gives you then an analog output. And that

61
00:06:08,169 --> 00:06:11,830
are the three phases for the motor.

62
00:06:11,830 --> 00:06:17,110
You can buy such motor controllers very cheaply, here in this picture on the right you can

63
00:06:17,110 --> 00:06:23,040
see such a controller. It's very small, it gets the power from the

64
00:06:23,040 --> 00:06:34,050
battery with the two thick red and black cables. And it then outputs the three motor phases in the left.

65
00:06:34,050 --> 00:06:42,540
And for actually reading in the signal you have the small thin cable that goes then to

66
00:06:42,540 --> 00:06:47,600
the autopilot board of the quadrotor.

67
00:06:47,600 --> 00:06:50,800
On interesting thing is that you can actually

68
00:06:50,800 --> 00:06:57,610
measure the position and the speed of the motor by evaluating the electromagnetic response

69
00:06:57,610 --> 00:07:01,580
on this three motor phases and in this way the motor controller can tell you whether

70
00:07:01,580 --> 00:07:05,460
the motor got stuck or whether it's rotating at the right speed. And of course you can also

71
00:07:05,460 --> 00:07:12,600
use that to achieve the exactly desired rotation speed.

72
00:07:12,600 --> 00:07:19,080
So to communicate with the autopilot board, you could again use the PWM signal. But it's

73
00:07:19,080 --> 00:07:27,220
even more efficient to have a micro controller for the motor controller and you have a PC

74
00:07:27,220 --> 00:07:34,030
or again a micro controller for the autopilot. So a digital protocol is more efficient.

75
00:07:34,030 --> 00:07:39,900
And then one protocol that is used a lot is the I^2C-Protocol, which is just a serial

76
00:07:39,900 --> 00:07:46,030
connection, a parallel bus. The cool thing is you can connect all motors then to the

77
00:07:46,030 --> 00:07:56,490
same I^2C bus. The individual slaves are addressed using

78
00:07:56,490 --> 00:08:02,919
an address and you can transmit at really high speeds.

79
00:08:02,919 --> 00:08:10,110
This is typically used as I said to communicate the motor speed from the autopilot board to

80
00:08:10,110 --> 00:08:15,300
the motor controller. And the actual motor speed or the actual motor properties are 

81
00:08:15,300 --> 00:08:21,500
send back to the autopilot.

82
00:08:21,500 --> 00:08:26,699
Just to fill that in with a nice example, this is now taken from the Parrot ArDrone,

83
00:08:26,699 --> 00:08:32,059
but you can find similar constructions on other quadrotors as well.

84
00:08:32,059 --> 00:08:38,740
This is the motor board or the motor component of the ArDrone. It consists of the brushless

85
00:08:38,740 --> 00:08:42,619
motor of course. On the inside the motors has three cables coming out of it

86
00:08:42,619 --> 00:08:48,350
for the three motor phases. And these phases are driven by the AC converters,

87
00:08:48,350 --> 00:08:55,240
those are the three chips here on the right. And then there is a small AVR CPU, this is

88
00:08:55,240 --> 00:09:01,910
for the micro controller that generates the PWM signal for the AC converters.

89
00:09:01,910 --> 00:09:10,470
And then the motor is not driving the propeller directly on the ArDrone, but there is a small

90
00:09:10,470 --> 00:09:17,900
gear in between. Other quadrotors directly drive the propellers, so this depends a little

91
00:09:17,900 --> 00:09:24,129
bit on the speed and the power of the motor that you are building into.

92
00:09:24,129 --> 00:09:27,569
So to summarize the lesson learned today in this video.

93
00:09:27,569 --> 00:09:31,759
We've looked at DC motors that are used on some quadrotors and brushless motors that

94
00:09:31,759 --> 00:09:37,619
are typically used on larger quadrotors. We've looked at the corresponding motor controllers.

95
00:09:37,619 --> 00:09:45,119
And we've looked at the ArDrone implementation of the motor controllers.

96
00:09:45,119 --> 00:09:52,400
In the next video we will look at methods for generating suitable control signals, because

97
00:09:52,400 --> 00:09:57,929
now the question is, what motor speed do we actually want for each of the four motors?

98
00:09:57,929 --> 00:10:04,360
And even at a higher level, what attitude do we want and what velocities do we want

99
00:10:04,360 --> 23:59:59,999
of the whole quadrotor?

