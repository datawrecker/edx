1
00:00:01,400 --> 00:00:05,300
Hello and welcome to video 4.4 on PID-Control.

2
00:00:05,300 --> 00:00:11,900
In the previous video we have seen how we can model the rigid body kinematics of a rigid body.

3
00:00:11,900 --> 00:00:19,869
And we will use that again now for bringing on our example from P-Control before.

4
00:00:19,869 --> 00:00:25,849
So consider just a simple rigid body like the soccer ball here that is free floating

5
00:00:25,849 --> 00:00:28,789
in 1 dimensional space, without any gravity.

6
00:00:28,789 --> 00:00:35,030
This means that the body itself is located at a certain location x and it's moving

7
00:00:35,030 --> 00:00:38,239
in a certain direction x dot.

8
00:00:38,239 --> 00:00:44,719
And so we can specify a really simple system model, where we just say: the current position

9
00:00:44,719 --> 00:00:50,399
depends on the previous position plus the current speed. With that we assume that our

10
00:00:50,399 --> 00:00:53,850
time constant delta t equals 1.

11
00:00:53,850 --> 00:00:58,800
And now assume that you are starting at the origin. So our current position is 0, and

12
00:00:58,800 --> 00:01:02,339
also our current speed is 0.

13
00:01:02,339 --> 00:01:08,650
And then, if we look at the time evolution of such a system we can see that nothing

14
00:01:08,650 --> 00:01:13,190
changes because in every new time step we just add 0 + 0.

15
00:01:13,190 --> 00:01:20,600
And that means that our object, will stay exactly at the same point.

16
00:01:20,600 --> 00:01:28,200
Now imagine further that we can now apply at every time instant a certain force F_t.

17
00:01:28,200 --> 00:01:37,900
And just for simplicity we assume that this force is our control, u, maybe scaled by some factor.

18
00:01:37,900 --> 00:01:44,200
As we now, this force that we apply leads

19
00:01:44,200 --> 00:01:52,960
to an acceleration, x double dot, and imagine now that we want to find controls so that

20
00:01:52,960 --> 00:01:58,280
the rigid body moves to a desired location of 1.

21
00:01:58,280 --> 00:02:03,490
And now, as we already know, we could just apply P-control to that, which means that

22
00:02:03,490 --> 00:02:13,200
the desired location x_des minus our current location x_(t-1) from the last time step.

23
00:02:13,200 --> 00:02:20,760
And then, we multiply that by a certain control gain K to obtain our control signal.

24
00:02:20,760 --> 00:02:24,600
Now what will happen if we apply this to a rigid body?

25
00:02:24,600 --> 00:02:33,100
And then, the result looks as follows: we start again now at the origin of our object,

26
00:02:33,100 --> 00:02:41,239
and we want to go to a location of 1. So our P-controller will generate a large control,

27
00:02:41,239 --> 00:02:50,920
in this case of 0.15, because we have set K to 0.15, which will make the object accelerate

28
00:02:50,920 --> 00:02:58,219
towards its desired location and then roughly at 4 seconds time we will hit the desired

29
00:02:58,219 --> 00:03:04,500
location. But because we still have some inertia the object will continue beyond this point and actually

30
00:03:04,500 --> 00:03:12,730
overshoot massively up to a position of 2. And then, during this time already our controller

31
00:03:12,730 --> 00:03:17,590
will generate a negative control output to decelerate the object

32
00:03:17,590 --> 00:03:23,090
and you can see that this leads to a very bad oscillation. And actually does not make

33
00:03:23,090 --> 00:03:27,700
our object come closer to the desired location.

34
00:03:27,700 --> 00:03:36,870
So this is not good, P-controls for rigid bodies that are not damped are not sufficient.

35
00:03:36,870 --> 00:03:47,180
The idea is now to use a so called derivative term, so we have a so called PD-controller then,

36
00:03:47,180 --> 00:03:52,510
where the first part is exactly the same and the second part at the same time tries to

37
00:03:52,510 --> 00:04:00,989
minimize the distance between the desired speed that we try to achieve and our current speed.

38
00:04:00,989 --> 00:04:10,340
And this now means that at this location of 1 we desired to have a speed of 0 so our x dot desired

39
00:04:10,340 --> 00:04:17,298
equals 0 to make sure that at the end, when we reach this goal, we want to have 0 velocity.

40
00:04:17,298 --> 00:04:25,860
And then, this leads to the following behavior: you can see now in the bottom plot we still

41
00:04:25,860 --> 00:04:37,480
have a proportional part that will accelerate our body to what's the desired location.

42
00:04:37,480 --> 00:04:47,670
And we have the blue line that shows the differential part now that immediately decelerates our

43
00:04:47,670 --> 00:04:56,670
body but at a smaller overall rate and this will lead to the nice behavior that we've see

44
00:04:56,670 --> 00:05:03,750
in the first plot with the red line that moves towards our desired location, but slows

45
00:05:03,750 --> 00:05:06,900
down before it actually hits it.

46
00:05:06,900 --> 00:05:13,900
And so you might wonder now, what would happen if we set lower gains for this differential part?

47
00:05:13,900 --> 00:05:18,170
And then, we get again this behavior that

48
00:05:18,170 --> 00:05:25,220
we have seen before, so the red line overshoots now to our desired location, because the slowing

49
00:05:25,220 --> 00:05:31,040
down is not strong enough. On the other hand, if we set higher gains for the differential

50
00:05:31,040 --> 00:05:40,780
part we end up with the following behavior: it still approaches the desired location

51
00:05:40,780 --> 00:05:47,900
nicely, but it takes extremely long like 25 seconds in this example and it could be much faster.

52
00:05:47,900 --> 00:05:55,070
So this K_D can also lead to a slower convergence then in the end.

53
00:05:55,070 --> 00:06:03,090
Now let's consider the following, before we've just lived in three floating in space, but what

54
00:06:03,090 --> 00:06:06,520
would happen if we add gravity to our system?

55
00:06:06,520 --> 00:06:14,430
So imagine that next to our controller force F that we generate we add this gravitational

56
00:06:14,430 --> 00:06:22,240
constant that accelerates our mass with a certain force.

57
00:06:22,240 --> 00:06:31,470
And then, the effect is as follows: we start at 0, again we want to go to 1, but then, the funny thing

58
00:06:31,470 --> 00:06:39,070
is the object falls down roughly to 60 meters.

59
00:06:39,070 --> 00:06:49,210
And after say 20 seconds or so the PD-control generates sufficiently strong control signals to actually

60
00:06:49,210 --> 00:06:56,080
make the object not fall down any further. But this is obviously not what we want, so

61
00:06:56,080 --> 00:07:01,140
this would be the case if you just use PD-control without gravity compensation.

62
00:07:01,140 --> 00:07:08,590
Then, the quadrotor would never reach its desired location.

63
00:07:08,590 --> 00:07:13,310
So what you can do then in such a case is to add an additional term that compensates

64
00:07:13,310 --> 00:07:20,710
for the gravity or for any other disturbance that you might be aware of.

65
00:07:20,710 --> 00:07:29,070
So directly into our control model we can now include a term for removing this gravitational

66
00:07:29,070 --> 00:07:34,500
force to compensate this gravitational force directly.

67
00:07:34,500 --> 00:07:43,680
And similar to that, any other known dynamic disturbance can be removed in this way.

68
00:07:43,680 --> 00:07:54,250
And then the effect is again as we have seen it before, we can go smoothly form 0 to 1,

69
00:07:54,250 --> 00:07:58,990
just by directly compensating force.

70
00:07:58,990 --> 00:08:05,310
The next problem now is: imagine that we have some systematic errors in our system. For

71
00:08:05,310 --> 00:08:11,750
example, our joystick might not be at the right position, the motors might not be equally

72
00:08:11,750 --> 00:08:15,770
strong. It could happen that one motor is a little bit weaker than another one. For

73
00:08:15,770 --> 00:08:22,950
example, because it has a broken propeller or just because it doesn't run as smoothly

74
00:08:22,950 --> 00:08:31,080
as another motor or it just might be a little bit unbalanced on the quadrotor or there might be some external

75
00:08:31,080 --> 00:08:38,479
disturbance like wind that constantly pushes away the quadrotor in a certain direction.

76
00:08:38,479 --> 00:08:47,100
And if we add something like this, in this example we have added wind from below that pushes the object upwards.

77
00:08:47,100 --> 00:08:50,900
And this is now again similar to what we had before with the gravitation.

78
00:08:50,900 --> 00:09:02,649
The object is now approaching this desired location  of 1 but it overshoots and it converges on a

79
00:09:02,649 --> 00:09:10,560
value that is not our desired value.  So it converges here on say 1.3 maybe. And on this location the PD-controller generates

80
00:09:10,560 --> 00:09:17,089
enough control output to not deviate any further from our desired value but as you can see

81
00:09:17,089 --> 00:09:21,900
it does no converge on our desired value. So the questions is: how can we deal with

82
00:09:21,900 --> 00:09:27,410
such systematic errors, how can we extend our controller to deal with something like this?

83
00:09:27,410 --> 00:09:38,800
And the answer now is to estimate this bias term by integrating over all errors that we

84
00:09:38,800 --> 00:09:43,399
had before from the very beginning to the current time step.

85
00:09:43,399 --> 00:09:49,470
And this is then called a so called integral term, which you can see here on the right.

86
00:09:49,470 --> 00:09:58,589
We again have a coefficient or a gain for the integral term, here denoted by K_I, and this term will

87
00:09:58,589 --> 00:10:05,180
build up and then compensate for such errors. So in the example that we have seen before, again

88
00:10:05,180 --> 00:10:12,329
we get some overshooting because initially this integral term is 0 so the algorithm doesn't

89
00:10:12,329 --> 00:10:15,519
know that we have a disturbance.

90
00:10:15,519 --> 00:10:27,500
But as soon as we overshoot and have observed this error this integral builds up and then

91
00:10:27,500 --> 00:10:31,600
compensates for it over time and you can see that now our controller

92
00:10:31,600 --> 00:10:34,129
nicely converges on the desired value.

93
00:10:34,129 --> 00:10:39,069
And in the bottom plot you can now see  how these three terms actually contribute to

94
00:10:39,069 --> 00:10:45,220
this behavior. So we have the bright red line corresponding

95
00:10:45,220 --> 00:10:53,999
to our proportional control output, the blue line corresponding to our differential output,

96
00:10:53,999 --> 00:11:04,249
and the bright green line corresponding to our systematic integral term.

97
00:11:04,249 --> 00:11:11,800
So it is in general a bit tricky to use the integral term, its generally fine for

98
00:11:11,800 --> 00:11:17,670
steady state systems, so systems that can actually reach their desired location and

99
00:11:17,670 --> 00:11:23,949
then it is very reasonable and very good to do that. But it might also happen that you

100
00:11:23,949 --> 00:11:30,800
have a system that can never reach a certain location and this might create a

101
00:11:30,800 --> 00:11:38,350
so called wind-up effect, which can lead to a disaster or at least to a strong delay in you controller.

102
00:11:38,350 --> 00:11:44,240
And now to see why this a problem consider the following example: imagine that we want that

103
00:11:44,240 --> 00:11:49,279
the quadrotor goes to a certain location, but then on its way get stuck in a tree, so

104
00:11:49,279 --> 00:11:53,730
it cannot reach the steady state. And then it is interesting to look at the

105
00:11:53,730 --> 00:11:59,490
effect of this being stuck on the integral term.

106
00:11:59,490 --> 00:12:06,900
And then, we see the following behavior: the quadrotor is send to a location of 10 in this

107
00:12:06,900 --> 00:12:16,889
example, so it goes quickly towards this location, but roughly at the position of 5 it get stuck

108
00:12:16,889 --> 00:12:23,319
in a tree. And from there on this integral term keeps building up, because it realizes that

109
00:12:23,319 --> 00:12:29,779
it needs to give more power to the motors apparently to reach its goal location, but it can't because

110
00:12:29,779 --> 00:12:34,529
it is stuck. And so this integral term grows larger and larger, as you can see in the bottom plot.

111
00:12:34,529 --> 00:12:44,600
And if we send now the quadrotor at the time step 10 back to the origin it won't go, because

112
00:12:44,600 --> 00:12:54,119
this integral term still outweighs our proportional-controller that tries to move the quadrotor back.

113
00:12:54,119 --> 00:13:03,550
And this is why the integral term is sometimes a bit difficult and dangerous to be used.

114
00:13:03,550 --> 00:13:08,579
Another problem of course is that we generally not only have one degree of freedom that we

115
00:13:08,579 --> 00:13:15,439
try to control, but typically multiple. In case of the ArDrone we have 4 degrees of freedom

116
00:13:15,439 --> 00:13:21,660
as you know, we can go forward, sideward, we can rotate, and we can change the flying height.

117
00:13:21,660 --> 00:13:26,490
And this is common with many systems, this is then called a MIMO system - multiple input

118
00:13:26,490 --> 00:13:31,149
multiple output. And also it would be of course nice from a

119
00:13:31,149 --> 00:13:35,800
theoretical point of view to control all degrees of freedom at the same time with the same controller.

120
00:13:35,800 --> 00:13:39,189
Most often these controllers are just being

121
00:13:39,189 --> 00:13:45,389
decoupled, so you have 2 or 4 independent PID-controllers, each one just controlling

122
00:13:45,389 --> 00:13:50,980
one degree of freedom. And then of course the plant, or the system,

123
00:13:50,980 --> 00:13:59,300
that you are looking at couples all of this degrees of freedom, but as long as this coupling

124
00:13:59,300 --> 00:14:06,779
is very loose it doesn't hurt to assume for the controllers that these degrees of freedom

125
00:14:06,779 --> 00:14:09,639
are actually separate.

126
00:14:09,639 --> 00:14:13,400
Another interesting question is then: how to choose then the coefficients? The problem

127
00:14:13,400 --> 00:14:17,949
here is that if you make the gains too large, as we have seen it can easily lead to

128
00:14:17,949 --> 00:14:22,679
overshooting and oscillations. However, if you make the gains to small, then it might take

129
00:14:22,679 --> 00:14:31,740
a very long time to converge. Still a good heuristic is to increase your start with small gains,

130
00:14:31,740 --> 00:14:37,449
and then, incrementally increase them until you see a good behavior. If you see oscillations

131
00:14:37,449 --> 00:14:40,839
you know that you made them too large and so on.

132
00:14:40,839 --> 00:14:45,800
There are some heuristic methods that you can follow that tell you how to tune these

133
00:14:45,800 --> 00:14:52,819
parameters, but in practice people often do it just by thump. Try out different values

134
00:14:52,819 --> 00:14:59,040
and finding then a parameter setting where you see a reasonable good behavior.

135
00:14:59,040 --> 00:15:04,369
Of course, there are more advanced techniques and the whole field of control theory studies

136
00:15:04,369 --> 00:15:15,670
these problems, but for our case and especially for the simulator that you'll be using this is completely sufficient.

137
00:15:15,670 --> 00:15:19,499
Another thing is of course that we are not only having one controller typically, but

138
00:15:19,499 --> 00:15:26,149
a whole sequence of controllers. For example, as you have seen before in hardware we already

139
00:15:26,149 --> 00:15:34,689
have motor speed controllers at every motor of the quadrotor, which internally runs not

140
00:15:34,689 --> 00:15:39,829
necessarily a PID-controller. Depends on what motor you have, if you can sense the speed,

141
00:15:39,829 --> 00:15:47,489
then there is typically something like a P-controller inside. And then, on the next level on the

142
00:15:47,489 --> 00:15:51,420
ArDrone for example, this happens onboard is the attitude estimation where you use the

143
00:15:51,420 --> 00:15:56,660
gyroscopes and the accelerometers to estimate the orientation of the quadrotor and then

144
00:15:56,660 --> 00:16:03,980
generate a suitable attitude control commands. And on top of that you might have a localization

145
00:16:03,980 --> 00:16:09,639
module that you're giving the camera images or your GPS signal to compute your position.

146
00:16:09,639 --> 00:16:15,420
And then, you might have a PID-controller that controls your position. And even above

147
00:16:15,420 --> 00:16:22,119
this layer you might have a trajectory control that generates waypoints

148
00:16:22,119 --> 00:16:25,900
to which you want to send the quadrotor. And it's important to note here:

149
00:16:25,900 --> 00:16:36,489
just stack different controllers above each other. This is then called cascaded control and this works well

150
00:16:36,489 --> 00:16:48,319
as long as the dynamics of the outer system are by at least a magnitude slower than the

151
00:16:48,319 --> 00:16:54,939
dynamics of the internal system. So for the internal controller the set point

152
00:16:54,939 --> 00:17:02,629
then appears to be static. And for the outer controller the dynamics of the internal system

153
00:17:02,629 --> 00:17:08,130
are so fast that it also appears to immediately converge.

154
00:17:08,130 --> 00:17:16,609
So to look at an example now, the ArDrone also uses several control loops. From our perspective

155
00:17:16,609 --> 00:17:21,559
we have an inner loop that runs on the embedded PC, which controls the attitude and the speed

156
00:17:21,559 --> 00:17:26,559
of the quadrotor. And then, the outer loop runs on a Laptop

157
00:17:26,559 --> 00:17:29,990
and implements the position control.

158
00:17:29,990 --> 00:17:34,309
And these two control loops run at different speeds, the internal loop, we don't really

159
00:17:34,309 --> 00:17:39,409
know, but it probably runs at a frequency around 1 kHz. Whie the outer loop runs depending

160
00:17:39,409 --> 00:17:46,000
on you wireless connection runs at approximately 15 to 20 Hz.

161
00:17:46,000 --> 00:17:54,800
And there is another interesting insight, the PD-controller is actually equivalent to a spring-damper system.

162
00:17:54,800 --> 00:18:00,760
So you can imagine that you have your quadrotor that's supposed to go to this desired location

163
00:18:00,760 --> 00:18:07,090
and it's actually being pulled like with virtual springs towards this desired location.

164
00:18:07,090 --> 00:18:11,580
And if you look very closely on this video you can see how this quadrotor moves back

165
00:18:11,580 --> 00:18:19,690
to its set point. And you can see how it is being damped by the D-term of the PD-controller

166
00:18:19,690 --> 00:18:24,169
and how it is being pulled towards its set point using the P-part.

167
00:18:24,169 --> 00:18:29,390
This is actually a very nice demo that we have published as open source and if you have

168
00:18:29,390 --> 00:18:34,800
an ArDrone at home you can just download this demo. You need a Linux computer running ROS

169
00:18:34,800 --> 00:18:41,620
on it, but it is all very well described on this wiki page, so please feel free to try this out.

170
00:18:41,620 --> 00:18:48,000
So to summarize the lesson of this video. We've looked now at full PID-control, remember again:

171
00:18:48,000 --> 00:18:52,400
P stands for the proportional term, I stands for the integral term,

172
00:18:52,400 --> 00:18:55,300
and D stands for the derivative term.

173
00:18:55,300 --> 00:19:01,019
And we have seen how we can stack multiple of such controllers in a cascaded control.

174
00:19:01,019 --> 23:59:59,999
And how we can decouple MIMO systems that have multiple inputs and multiple outputs.

